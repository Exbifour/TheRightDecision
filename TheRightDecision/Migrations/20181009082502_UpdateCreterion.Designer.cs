// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheRightDecision.Data;

namespace TheRightDecision.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181009082502_UpdateCreterion")]
    partial class UpdateCreterion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheRightDecision.Models.Alternative", b =>
                {
                    b.Property<int>("AlternativeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("AlternativeId");

                    b.ToTable("Alternatives");
                });

            modelBuilder.Entity("TheRightDecision.Models.Criterion", b =>
                {
                    b.Property<int>("CriterionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OptimalityType")
                        .IsRequired();

                    b.Property<int?>("Rank");

                    b.Property<string>("Scale")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Units");

                    b.Property<int?>("Weight");

                    b.HasKey("CriterionId");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("TheRightDecision.Models.Mark", b =>
                {
                    b.Property<int>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CriterionId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Normalized");

                    b.Property<int?>("Number");

                    b.Property<int>("Rank");

                    b.HasKey("MarkId");

                    b.HasIndex("CriterionId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("TheRightDecision.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Rank");

                    b.HasKey("PersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("TheRightDecision.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlternativeId");

                    b.Property<int>("AlternativeWeight");

                    b.Property<int>("PersonId");

                    b.Property<double>("Rank");

                    b.HasKey("ResultId");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("TheRightDecision.Models.Vector", b =>
                {
                    b.Property<int>("VectorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlternativeId");

                    b.Property<int>("MarkId");

                    b.HasKey("VectorId");

                    b.HasIndex("AlternativeId");

                    b.HasIndex("MarkId");

                    b.ToTable("Vectors");
                });

            modelBuilder.Entity("TheRightDecision.Models.Mark", b =>
                {
                    b.HasOne("TheRightDecision.Models.Criterion", "Criterion")
                        .WithMany("Marks")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheRightDecision.Models.Result", b =>
                {
                    b.HasOne("TheRightDecision.Models.Alternative", "Alternative")
                        .WithMany("Results")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheRightDecision.Models.Person", "Person")
                        .WithMany("Results")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheRightDecision.Models.Vector", b =>
                {
                    b.HasOne("TheRightDecision.Models.Alternative", "Alternative")
                        .WithMany("Vectors")
                        .HasForeignKey("AlternativeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheRightDecision.Models.Mark", "Mark")
                        .WithMany("Vectors")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
